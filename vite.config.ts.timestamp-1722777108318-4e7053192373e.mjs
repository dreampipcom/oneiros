// vite.config.ts
import eslint from "file:///Users/angeloreale/ar/dreampip/oneiros/node_modules/vite-plugin-eslint/dist/index.mjs";
import { defineConfig } from "file:///Users/angeloreale/ar/dreampip/oneiros/node_modules/vite/dist/node/index.js";
import react from "file:///Users/angeloreale/ar/dreampip/oneiros/node_modules/@vitejs/plugin-react/dist/index.mjs";
import dts from "file:///Users/angeloreale/ar/dreampip/oneiros/node_modules/vite-plugin-dts/dist/index.mjs";

// package.json
var peerDependencies = {
  clsx: "2.1.0",
  lazysizes: "^5.3.2",
  react: "^18.2.0",
  "react-dom": "^18.2.0",
  tailwindcss: "3.4.4",
  typescript: "5.4.5"
};

// vite.config.ts
var vite_config_default = defineConfig((env) => ({
  build: {
    lib: {
      entry: "./src/index.ts",
      name: "vite-react-ts-button",
      fileName: (format) => `index.${format}.js`,
      formats: ["cjs", "es"]
    },
    rollupOptions: {
      external: [...Object.keys(peerDependencies), "react/jsx-runtime"]
    },
    sourcemap: true,
    emptyOutDir: true
  },
  plugins: [
    dts({
      insertTypesEntry: true
    }),
    react({ fastRefresh: false }),
    env.mode !== "test" && eslint({
      exclude: ["/virtual:/**", "node_modules/**", "/sb-preview/**"]
    })
  ],
  test: {
    globals: true,
    environment: "jsdom",
    setupFiles: "./setupTests.ts"
  }
}));
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
